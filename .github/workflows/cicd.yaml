name: cicd
on: [push]
jobs:

  init:
    runs-on: ubuntu-latest
    outputs:
      tag-floating: ${{ steps.sanitize.outputs.refname }}
      tag-fixed: ${{ steps.sanitize.outputs.refname }}.${{ github.run_number }}
      build-info-properties: ${{ steps.build-info-properties.outputs.content }}
      git-properties: ${{ steps.git-properties.outputs.content }}
    steps:
      - uses: actions/checkout@v3
      - name: sanitize-ref-name
        id: sanitize
        env:
          GIT_REF: ${{ github.ref_name }}
        run: |
          echo "::set-output name=refname::$(echo ""$GIT_REF"" | sed -r 's/([^a-zA-Z0-9.]+)/-/g' | sed -r 's/(^-|-$)//g')"
      - name: define-build-info-properties
        id: build-info-properties
        env:
          BUILD_SYSTEM: ${{ runner.name }}
          BUILD_USER: ${{ github.actor }}
        run: |
          echo "::set-output name=content::build.name=github actions\nbuild.system=$BUILD_SYSTEM\nbuild.time=$(date)\nbuild.user=$BUILD_USER\nbuild.version=$(cat docker-builds/version.info)-${{ steps.sanitize.outputs.refname }}.${{ github.run_number }}\nbuild.number=${{ github.run_number }}"
      - name: define-git-properties
        id: git-properties
        env:
          GIT_URL: ${{ github.repositoryUrl }}
          GIT_REF: ${{ github.event.ref }}
          GIT_ID: ${{ github.event.head_commit.id }}
          GIT_MSG: ${{ github.event.head_commit.message }}
        run: |
          echo "::set-output name=content::git.remote.origin.url=$GIT_URL\ngit.branch=$GIT_REF\ngit.commit.id=$GIT_ID\ngit.commit.message=$GIT_MSG"
      - name: print-vars
        run: env
      - name: print-info
        env:
          OUT_REFNAME: ${{ steps.sanitize.outputs.refname }}
          OUT_BUILD_PROPS: ${{ steps.build-info-properties.outputs.content }}
          OUT_GIT_PROPS: ${{ steps.git-properties.outputs.content }}
        run: |
          echo -e "[sanitized refname]\n$OUT_REFNAME\n"
          echo -e "[build-info.properties]\n$OUT_BUILD_PROPS\n"
          echo -e "[git-properties]\n$OUT_GIT_PROPS\n"

  java:
    runs-on: ubuntu-latest
    needs: init
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: metasfresh
          password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
      - name: build-commons
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.common \
          --cache-to type=inline \
          --cache-from metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-backend
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.backend \
          --cache-to type=inline \
          --cache-from metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-camel
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.camel \
          --cache-to type=inline \
          --cache-from metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-camel-dist
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.camel.dist \
          --cache-to type=inline \
          --cache-from metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          --build-arg VERSION=$(cat docker-builds/version.info)-${{ needs.init.outputs.tag-fixed }} \
          -t metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: push-images
        run: |
          docker push metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-floating }}
      - name: push-camel-dist
        run: |
          docker run --rm -e GITHUB_ACTOR=${{ github.actor }} -e GITHUB_TOKEN=${{ github.token }} metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-fixed }}

  frontend:
    runs-on: ubuntu-latest
    needs: init
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: metasfresh
          password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
      - name: build-frontend
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.frontend \
          --cache-to type=inline \
          --cache-from metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-mobile
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.mobile \
          --cache-to type=inline \
          --cache-from metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: push-images
        run: |
          docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }}
      - name: produce-summary
        run: |
          echo '#### images' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}' >> $GITHUB_STEP_SUMMARY
          
  test-frontend:
    name: test (frontend)
    runs-on: ubuntu-latest
    needs: [init, frontend]
    steps:
      - uses: actions/checkout@v3
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: metasfresh
      - name: run-tests
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.frontend \
          --target test \
          -t metas-frontend:test \
          .
      - name: publish results
        run: |
          docker run --rm -v "$(pwd)/jest:/reports" metas-frontend:test                                             # extracting test results from docker image
          find jest -type d -links 2 -exec testspace [{}]{}/*.xml \;                                                # upload all jest xml's to testspace 
          testspace "[jest/frontend]jest/frontend/jest.log{$(cat jest/frontend/jest.exit-code):webui jest tests}"   # upload webui log with exit code
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: jest-logs
          path: jest/**/jest.log

  backend:
    runs-on: ubuntu-latest
    needs: [init, java]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: metasfresh
          password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
      - name: prepare
        env:
          INIT_BUILD_PROPS: ${{ needs.init.outputs.build-info-properties }}
          INIT_GIT_PROPS: ${{ needs.init.outputs.git-properties }}
        run: |
          echo -e "$INIT_BUILD_PROPS" > docker-builds/metadata/build-info.properties
          echo -e "$INIT_GIT_PROPS" > docker-builds/metadata/git.properties
      - name: build-api
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.backend.api \
          --cache-to type=inline \
          --cache-from metasfresh/metas-api:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-api:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-app
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.backend.app \
          --cache-to type=inline \
          --cache-from metasfresh/metas-app:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-app:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-externalsystems
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.camel.externalsystems \
          --cache-to type=inline \
          --cache-from metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-db
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.db-standalone \
          --cache-to type=inline \
          --cache-from metasfresh/metas-db:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-db:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: build-db-preloaded
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.db-preloaded \
          --cache-to type=inline \
          --cache-from metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-preloaded \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-preloaded \
          -t metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-preloaded \
          .
      - name: push-images
        run: |
          docker push metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-preloaded
          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-preloaded
      - name: produce-summary
        run: |
          echo '#### images' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-fixed }}' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-preloaded' >> $GITHUB_STEP_SUMMARY

  compatibility-images:
    runs-on: ubuntu-latest
    needs: [init, frontend, backend]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: metasfresh
          password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
      - name: build-api-compat
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.backend.api.compat \
          --cache-to type=inline \
          --cache-from metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}-compat \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}-compat \
          -t metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}-compat \
          .
      - name: build-app-compat
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.backend.app.compat \
          --cache-to type=inline \
          --cache-from metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}-compat \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}-compat \
          -t metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}-compat \
          .
      - name: build-mobile-compat
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.mobile.compat \
          --cache-to type=inline \
          --cache-from metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }}-compat \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }}-compat \
          -t metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}-compat \
          .
      - name: build-frontend-compat
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.frontend.compat \
          --cache-to type=inline \
          --cache-from metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }}-compat \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }}-compat \
          -t metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}-compat \
          .
      - name: push-images
        run: |
          docker push metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}-compat
          docker push metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}-compat
          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}-compat
          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}-compat
          docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}-compat
          docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }}-compat
          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}-compat
          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }}-compat
          docker tag metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}-compat metasfresh/metasfresh-webapi:${{ needs.init.outputs.tag-fixed }}-compat
          docker tag metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}-compat metasfresh/metasfresh-app:${{ needs.init.outputs.tag-fixed }}-compat
          docker tag metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}-compat metasfresh/metasfresh-webui:${{ needs.init.outputs.tag-fixed }}-compat
          docker push metasfresh/metasfresh-webapi:${{ needs.init.outputs.tag-fixed }}-compat
          docker push metasfresh/metasfresh-app:${{ needs.init.outputs.tag-fixed }}-compat
          docker push metasfresh/metasfresh-webui:${{ needs.init.outputs.tag-fixed }}-compat
      - name: produce-summary
        run: |
          echo 'Custom images are available under the following tag: `${{ needs.init.outputs.tag-fixed }}-compat`' >> $GITHUB_STEP_SUMMARY
          echo 'and can be deployed on any regular system via metasfresh instances rollout using the above tag as *Baseversion*.' >> $GITHUB_STEP_SUMMARY
          echo '#### images' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metasfresh-webapi:${{ needs.init.outputs.tag-fixed }}-compat' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metasfresh-app:${{ needs.init.outputs.tag-fixed }}-compat' >> $GITHUB_STEP_SUMMARY
          echo '* metasfresh/metasfresh-webui:${{ needs.init.outputs.tag-fixed }}-compat' >> $GITHUB_STEP_SUMMARY

  junit:
    name: test (java)
    runs-on: ubuntu-latest
    needs: [init, java]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: metasfresh
          password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: metasfresh
      - name: run-junit-tests-j8
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.junit \
          --cache-to type=inline \
          --cache-from metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }} \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }} \
          .
      - name: run-junit-tests-j14
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.camel.junit \
          --cache-to type=inline \
          --cache-from metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}-j14 \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}-j14 \
          .
      - name: push-result-image
        run: |
          docker push metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}
          docker push metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}-j14
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: metasfresh
      - name: push-results
        run: |
          docker run --rm -v "$(pwd)/junit:/reports" metasfresh/metas-junit:${{ needs.init.outputs.tag-fixed }}                 # extracting java8 test results from docker image
          docker run --rm -v "$(pwd)/junit:/reports" metasfresh/metas-junit:${{ needs.init.outputs.tag-fixed }}-j14             # extracting java14 test results from docker image
          find junit -type d -links 2 -exec testspace [{}]{}/*.xml \;                                                           # upload all junit xml's to testspace 
          testspace "[junit/commons]junit/commons/junit.log{$(cat junit/commons/junit.exit-code):java 8 commons junit tests}"   # upload commons log with exit code 
          testspace "[junit/backend]junit/backend/junit.log{$(cat junit/backend/junit.exit-code):java 8 backend junit tests}"   # upload backend log with exit code
          testspace "[junit/camel]junit/camel/junit.log{$(cat junit/camel/junit.exit-code):jav 14 camel junit tests}"           # upload camel log with exit code      
      - name: assert success
        run: |
          if [ $(cat junit/commons/junit.exit-code) != 0 ]; then cat junit/commons/junit.log && exit 1; fi        # print commons log and exit if foo failed
          if [ $(cat junit/backend/junit.exit-code) != 0 ]; then cat junit/backend/junit.log && exit 1; fi        # print backend log and exit if foo failed
          if [ $(cat junit/camel/junit.exit-code) != 0 ]; then cat junit/camel/junit.log && exit 1; fi            # print camel log and exit if foo failed
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: junit-logs
          path: junit/**/junit.log
      - name: produce-summary
        run: |
          echo 'test results can be found at https://metasfresh.testspace.com/' >> $GITHUB_STEP_SUMMARY

  cucumber:
    runs-on: ubuntu-latest
    needs: [init, backend, frontend]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: metasfresh
          password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
      - uses: testspace-com/setup-testspace@v1
        with:
          domain: metasfresh
      - name: build-cucumber
        run: |
          docker buildx build \
          -f docker-builds/Dockerfile.cucumber \
          --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-cucumber:${{ needs.init.outputs.tag-floating }} \
          -t metasfresh/metas-cucumber:${{ needs.init.outputs.tag-fixed }} \
          .
      - name: push-images
        run: |
          docker push metasfresh/metas-cucumber:${{ needs.init.outputs.tag-fixed }}
          docker push metasfresh/metas-cucumber:${{ needs.init.outputs.tag-floating }}
      - name: run-tests
        env:
          refname: ${{ needs.init.outputs.tag-fixed }}
        timeout-minutes: 120
        run: |
          mkdir cucumber
          docker cp "$(docker create --name tempcopytainer metasfresh/metas-cucumber:$refname):/compose.yml" . && docker rm tempcopytainer
          docker-compose up --abort-on-container-exit --exit-code-from cucumber 2>&1 | tee cucumber.log && echo "${PIPESTATUS[0]}" > cucumber.exit-code
          docker-compose down
      - name: push-results
        run: |
          find cucumber -type d -links 2 -exec testspace [{}]{}/*.xml \;                    # upload all cucumber xml's to testspace
          testspace "[cucumber]cucumber.log{$(cat cucumber.exit-code):cucumber tests}"      # upload cucumber log with exit code 
      - name: assert success
        run: |
          if [ $(cat cucumber.exit-code) != 0 ]; then cat cucumber.log && exit 1; fi        # print cucumber log and exit if cucumber failed
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cucumber-logs
          path: cucumber.log
      - name: produce-summary
        run: |
          echo 'test results can be found at https://metasfresh.testspace.com/' >> $GITHUB_STEP_SUMMARY

  redeploy:
    runs-on: ubuntu-latest
    needs: [init, backend, frontend]
    environment: 'dev'
    steps:
      - name: dispatching-redeploy
        run: |
          curl -X "POST" -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.MF15_KUBERNETES_PAT }}" -d '{"event_type":"redeploy","client_payload":{"tag":"${{ needs.init.outputs.tag-floating }}"}}' https://api.github.com/repos/metasfresh/mf15-kubernetes/dispatches
